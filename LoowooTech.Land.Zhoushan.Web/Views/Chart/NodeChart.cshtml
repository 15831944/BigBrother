@{
    Form form = ViewBag.Form;
    List<NodeValueType> valueTypes = ViewBag.ValueTypes;

    List<Node> childNodes = ViewBag.ChildNodes;
    List<NodeValue> childValues = ViewBag.ChildValues;

    NodeValueParameter parameter = ViewBag.Parameter;
    Node currentNode = ViewBag.CurrentNode;
    List<NodeValue> currentValues = ViewBag.CurrentNodeValues;
    ////如果当前没有选择分类，且没有分组，则不显示饼图
    //if (currentNode == null && !childNodes.Any(e=>!string.IsNullOrEmpty(e.Group)))
    //{
    //    return;
    //}
    var groups = childNodes.GroupBy(e => e.Group).ToDictionary(g => g.Key ?? string.Empty, g => g.ToList());
    var index = 0;
}

<div class="col-md-4">
    @foreach (var kv in groups)
    {
        index++;
        var group = kv.Key;
        if (currentNode == null && string.IsNullOrEmpty(group))
        {
            continue;
        }
        var children = kv.Value.Where(e => e.NodeValueTypes.Length > 0);
        var labels = children.OrderBy(e => e.ID).Select(e => e.Name).ToArray();
        if (labels.Length < 2)
        {
            continue ;
        }
        var nodeIds = children.Select(e => e.ID).ToArray();
        var values = childValues.Where(e => nodeIds.Contains(e.NodeID)).ToList();
        var typeIds = values.GroupBy(e => e.TypeID).Select(g => g.Key).ToArray();
        <div class="row">
            <h4>@(group)</h4>
            <canvas id="chart-childnode-@(index)"></canvas>
        </div>
        <script>
            $(function () {
                var labels = @Html.Raw(labels.ToJson()) || [];
                var ctx = document.getElementById("chart-childnode-@(index)");
                var myChart = new Chart(ctx, {
                    type: 'horizontalBar',
                    data: {
                        labels: labels,
                        datasets:[
                        @for (var i = 0; i < typeIds.Length; i++) {
                            var valueType = valueTypes.FirstOrDefault(e => e.ID == typeIds[i]);
                            var data = new List<string>();
                            foreach (var nodeId in nodeIds)
                            {
                                var val = values.Where(e => e.NodeID == nodeId && e.TypeID == typeIds[i]).Select(e => e.Value).DefaultIfEmpty(0).Sum().ToString("f2").TrimEnd('0').TrimEnd('.');
                                data.Add(val);
                            }
                        <text>
                            {
                                label: "@(valueType.Name)",
                                data:@(Html.Raw(data.ToJson())),
                                backgroundColor: getChartColor(@(i)),
                                borderWidth: 1
                            }
                      </text>
                            if (i < typeIds.Length -1) {
                            @:,
                        }
                        }
                        ]
                    },options:{
                        stacked:true
                    }
                });
            });
        </script>
    }
</div>
<div class="col-md-5 grid">
    <div class="row grid-header">
        <div class="col-md-6">分类</div>
        <div class="col-md-3">值</div>
        <div class="col-md-3">@(parameter.RateType.Value.GetDescription()) %</div>
    </div>
    @if (currentNode != null && currentValues != null)
    {
        Html.RenderPartial("_NodeChartItem", currentNode);
    }
    else
    {
        foreach (var child in childNodes)
        {
            Html.RenderPartial("_NodeChartItem", child);
        }
    }
</div>