@{
    List<Node> childNodes = ViewBag.ChildNodes;
    NodeValueType valueType = ViewBag.ValueType;
    List<NodeValue> childValues = ViewBag.ChildValues;
    List<NodeValue> nodeValues = ViewBag.NodeValues;
    NodeValueParameter parameter = ViewBag.Parameter;
    Node node = ViewBag.Node;

    var groups = childNodes.GroupBy(e => e.Group).ToDictionary(g => g.Key ?? node.Name, g => g.ToList());
    var index = 0;
}
@foreach (var kv in groups)
{
    index++;
    var group = kv.Key;
    var children = kv.Value;
    var nodeIds = children.Select(e => e.ID).ToArray();
    var values = childValues.Where(e => nodeIds.Contains(e.NodeID)).ToList();
    var labels = children.OrderBy(e => e.ID).Select(e => e.Name).ToArray();
    var data = values.GroupBy(e => e.NodeID).ToDictionary(g => g.Key, g => g.Sum(e => e.Value)).OrderBy(g => g.Key).Select(g => g.Value.ToString("f2"));
    <div class="col-lg-12">
        <hr />
        <h4>@(group)</h4>
        <div class="col-lg-4">
            <canvas id="chart-childnode-@(index)"></canvas>
        </div>
        <div class="col-lg-5">
            <table class="table">
                <tr>
                    <th>分类</th>
                    <th>@(valueType.Name)(@(valueType.Unit))</th>
                    <th>@(parameter.RateType.Value.GetDescription()) %</th>
                </tr>
                @if (index == 1)
                {
                    foreach (var g in nodeValues.GroupBy(n=>n.NodeID))
                    {
                        var val = g.Sum(e => e.Value);
                        var rateValue = g.Sum(e => e.RateValue);
                        <tr>
                            <td>@(node.Name)</td>
                            <td>@(val.ToString("f2"))</td>
                            <td>@(rateValue.ToString("f1"))</td>
                        </tr>
                    }
                }
                @foreach (var child in children)
                {
                    var vals = values.Where(e => e.NodeID == child.ID);
                    var sumValue = vals.Sum(e => e.Value);
                    var sumRate = vals.Sum(e => e.RateValue);
                    <tr>
                        <td>
                            -- @(child.Name)
                        </td>
                        <td>@(sumValue.ToString("f2"))</td>
                        <td>@(sumRate.ToString("f1"))</td>
                    </tr>
                }
            </table>
        </div>
    </div>
    <script>
        $(function () {
            function getColors(len){
                var colors = ["#FF6384",
                "#4BC0C0",
                "#FFCE56",
                "#E7E9ED",
                "#36A2EB"
                ];

                return colors.slice(0,len);
            }

            var labels = @Html.Raw(labels.ToJson()) || [];
            var data = @Html.Raw(data.ToJson()) || [];
            var len = labels.length - data.length;
            for(var i=0;i<len;i++){
                data.push(0);
            }
            var ctx = document.getElementById("chart-childnode-@(index)");
            var myChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets:[{
                        data:data,
                        backgroundColor:getColors(data.length)
                    }]
                }
            });
        });
    </script>
}
