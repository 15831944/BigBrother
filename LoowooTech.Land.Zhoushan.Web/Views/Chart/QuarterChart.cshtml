@{
    NodeValueParameter parameter = ViewBag.Parameter;
    List<NodeValue> values = ViewBag.NodeValues;
    List<Node> nodes = ViewBag.Nodes;
    List<NodeValueType> valueTypes = ViewBag.ValueTypes;
    var currentYear = DateTime.Now.Year;
    var currentQuarter = (Quarter)DateTime.Now.GetQuarter();
    bool compareYear = parameter.Quarters != null && parameter.Quarters.Length == 4;
    var labels = new List<string>();
    var typeId = values.GroupBy(v => v.TypeID).ToDictionary(g => g.Key, g => g.Count()).OrderByDescending(kv => kv.Value).FirstOrDefault().Key;
    foreach (var year in parameter.Years.OrderBy(e => e))
    {
        if (compareYear)
        {
            labels.Add(year.ToString());
        }
        else
        {
            foreach (var qval in Enum.GetValues(typeof(Quarter)))
            {
                var quarter = (Quarter)qval;
                if (year == currentYear && quarter > currentQuarter)
                {
                    break;
                }

                labels.Add(year + "-" + (int)quarter);
            }
        }
    }
    var groups = nodes.GroupBy(e => e.Group).ToDictionary(g => g.Key ?? string.Empty, g => g.ToList());
    var index = 0;
}
<hr />
<h4>历史数据</h4>

@foreach (var kv in groups)
{
    index++;
    var groupNodes = kv.Value;
    if (groupNodes.Count == 0) { continue; }
     <div class="col-md-5">
        <div class="col-md-12">
            <canvas id="chart-quarter-@(index)"></canvas>
        </div>
        <script>
            $(function(){
                var ctx = document.getElementById("chart-quarter-@(index)");
                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: @(Html.Raw(labels.ToJson())),
                        datasets:[
                    @for (var i=0;i< groupNodes.Count;i++)
                    {
                        var node = groupNodes[i];
                        var vals = values.Where(e => e.NodeID == node.ID);
                        if (vals.Count() == 0)
                        {
                            continue;
                        }
                        var firstVal = vals.FirstOrDefault();
                        if (firstVal.Type == null)
                        {
                            continue;
                        }
                        vals = vals.Where(e => e.TypeID == firstVal.Type.ID);

                        var data = new List<string>();
                        foreach (var year in parameter.Years.OrderBy(e => e))
                        {
                            if (compareYear)
                            {
                                var val = vals.Where(e => e.Year == year).Select(e => e.Value).DefaultIfEmpty(0).Sum().ToString("F2").TrimEnd('0').TrimEnd('.');
                                data.Add(val);
                            }
                            else
                            {
                                foreach (var qval in Enum.GetValues(typeof(Quarter)))
                                {
                                    var quarter = (Quarter)qval;
                                    if (year == currentYear && quarter > currentQuarter)
                                    {
                                        break;
                                    }

                                    var val = vals.Where(e => e.Year == year && e.Quarter == quarter).Select(e => e.Value).DefaultIfEmpty(0).Sum().ToString("F2").TrimEnd('0').TrimEnd('.');
                                    data.Add(val);
                                }
                            }
                        }

                        <text>
                            {
                                label: "@(node.Name)",
                                data:@(Html.Raw(data.ToJson())),
                                borderColor: getChartColor(@(i)),
                                fill: false,
                                lineTension: 0.1
                            }
                            </text>
                        if (i <groupNodes.Count-1)
                        {
                            @:,
                        }

                    }
                        ]
                    },
                    options:{scales: {
                        height:200
                    }
                    }
                });
            });
        </script>
    </div>
}
